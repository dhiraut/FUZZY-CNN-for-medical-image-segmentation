# -*- coding: utf-8 -*-
"""cnn-model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gcBK-WUEn5FZIes7uvmAhn71qjCmx08S
"""

import numpy as np

class SimpleCNN:
    def __init__(self, input_shape, num_filters, kernel_size):
        self.filters = [
            np.random.randn(num_filters, kernel_size, kernel_size) * np.sqrt(2 / (kernel_size**2))
            for _ in range(1)  # Single convolutional layer
        ]
        self.biases = [np.zeros(num_filters)]

    def relu(self, x):
        return np.maximum(0, x)

    def convolve(self, image, kernel):
        h, w = image.shape
        kh, kw = kernel.shape
        output_shape = (h - kh + 1, w - kw + 1)
        convolved = np.zeros(output_shape)
        for i in range(output_shape[0]):
            for j in range(output_shape[1]):
                convolved[i, j] = np.sum(image[i:i+kh, j:j+kw] * kernel)
        return convolved

    def forward(self, image):
        layer_output = []
        for i, kernel_set in enumerate(self.filters):
            layer_feature_maps = []
            for kernel in kernel_set:
                feature_map = self.convolve(image, kernel) + self.biases[i][0]
                feature_map = self.relu(feature_map)
                layer_feature_maps.append(feature_map)
            layer_output.append(np.stack(layer_feature_maps, axis=0))
        return np.sum(layer_output[-1], axis=0)

